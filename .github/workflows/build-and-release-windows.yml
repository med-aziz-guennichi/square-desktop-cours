name: Build and Release Tauri App (Windows only)

on:
  push:
    tags:
      - 'v*'

env:
  PROJECT_NAME: studiffy-cours
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~\.cargo\registry
            ~\.cargo\git
            src-tauri\target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Cache Bun/node_modules
      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~\.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/package.json') }}

      - name: Install Bun
        shell: pwsh
        run: |
          irm bun.sh/install.ps1 | iex
          Add-Content $env:GITHUB_PATH "$env:USERPROFILE\.bun\bin"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          profile: minimal

      - name: Install dependencies
        run: |
          bun install

      - name: Inject .env
        run: |
          echo VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }} >> .env

      - name: Build Tauri App
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PASSWORD }}
        run: |
          bunx tauri build --verbose

      - name: Verify MSI signature
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}".TrimStart("v")
          $sigPath = "src-tauri\target\release\bundle\msi\${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi.sig"
          if (!(Test-Path $sigPath)) {
            Write-Error "Signature file not found: $sigPath"
            exit 1
          }

      - name: Generate latest.json
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}".TrimStart("v")
          $sig = Get-Content "src-tauri\target\release\bundle\msi\${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi.sig" -Raw
          @{
            version = $version
            notes = "Release $version"
            pub_date = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                signature = $sig
                url = "https://raw.githubusercontent.com/med-aziz-guennichi/studiffy-release/main/releases/v${version}/msi/${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi"
              }
            }
          } | ConvertTo-Json -Depth 3 | Out-File "src-tauri/target/release/bundle/latest.json" -Encoding UTF8

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle-windows
          path: src-tauri/target/release/bundle
          retention-days: 1

  release:
    name: Push to studiffy-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bundle-windows
          path: ./artifacts

      - run: |
          git clone https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/med-aziz-guennichi/studiffy-release.git release-repo
          mkdir -p release-repo/releases/${{ github.ref_name }}
          cp -r artifacts/* release-repo/releases/${{ github.ref_name }}/
          cp artifacts/latest.json release-repo/latest.json || echo "latest.json not found"

      - run: |
          cd release-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Release ${{ github.ref_name }}"
          git push
