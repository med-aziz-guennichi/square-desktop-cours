name: Build and Release Tauri App (Windows only)

on:
  push:
    tags:
      - 'v*' # Runs on tag pushes like v1.0.0

env:
  PROJECT_NAME: studiffy-cours

jobs:
  build:
    name: Build Windows
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu

      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install system dependencies for cross-compiling
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 zip nsis

      - name: Install JS dependencies and build frontend
        run: |
          bun install
          bun run build

      - name: Build Tauri App for Windows
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PASSWORD }}
        run: |
          bunx tauri build --target x86_64-pc-windows-gnu
      - name: Verify MSI signature file
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          SIG_PATH="src-tauri/target/x86_64-pc-windows-gnu/release/bundle/nsis/${{ env.PROJECT_NAME }}_${VERSION}_x64-setup.exe.sig"
          if [ ! -f "$SIG_PATH" ]; then
            echo "Error: Signature file $SIG_PATH does not exist."
            exit 1
          fi

      - name: Generate latest.json
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          SIG_PATH="src-tauri/target/x86_64-pc-windows-gnu/release/bundle/nsis/${{ env.PROJECT_NAME }}_${VERSION}_x64-setup.exe.sig"
          FILE_PATH="https://github.com/med-aziz-guennichi/studiffy-release/releases/v${VERSION}/nsis/${{ env.PROJECT_NAME }}_${VERSION}_x64-setup.exe"
          SIG=$(cat "$SIG_PATH")

          echo "{
            \"version\": \"$VERSION\",
            \"notes\": \"Auto-generated release\",
            \"pub_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
            \"platforms\": {
              \"windows-x86_64\": {
                \"signature\": \"$SIG\",
                \"url\": \"$FILE_PATH\"
              }
            }
          }" > src-tauri/target/x86_64-pc-windows-gnu/release/bundle/latest.json

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle-windows
          path: |
            src-tauri/target/x86_64-pc-windows-gnu/release/bundle

  release:
    name: Push to studiffy-release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Clone studiffy-release repo
        run: |
          git clone https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/med-aziz-guennichi/studiffy-release.git release-repo

      - name: Copy artifacts to release repo
        run: |
          mkdir -p release-repo/releases/${{ github.ref_name }}
          cp -r artifacts/*/* ./release-repo/releases/${{ github.ref_name }}/

          # Attempt to find latest.json and copy it to root
          LATEST_JSON=$(find artifacts -type f -name latest.json)
          if [ -f "$LATEST_JSON" ]; then
            cp "$LATEST_JSON" release-repo/latest.json
            echo "Copied latest.json to root"
          else
            echo "latest.json not found"
            exit 1
          fi


      - name: Commit and push to public repo
        run: |
          cd release-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Release ${{ github.ref_name }} for Windows"
          git push
