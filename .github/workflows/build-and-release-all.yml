name: Build and Release Tauri App

on:
  release:
    types: [published]

env:
  PROJECT_NAME: studiffy-cours
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Bundle (${{ matrix.os }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [windows]
        include:
          - os: windows
            runner: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/package.json') }}

      - name: Install Bun
        shell: bash
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH
        if: matrix.os != 'windows'

      - name: Install Bun (Windows)
        shell: pwsh
        run: |
          irm bun.sh/install.ps1 | iex
          Add-Content $env:GITHUB_PATH "$env:USERPROFILE\.bun\bin"
        if: matrix.os == 'windows'

      - name: Install system dependencies (Linux only)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libglib2.0-dev patchelf

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          profile: minimal

      - name: Install frontend dependencies
        run: bun install

      - name: Inject .env
        shell: bash
        run: echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> .env

      - name: Build Tauri app
        if: matrix.os == 'macos'
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PASSWORD }}
        run: bunx tauri build --target x86_64-apple-darwin --verbose

      - name: Build Tauri app
        if: matrix.os != 'macos'
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PASSWORD }}
        run: bunx tauri build

      - name: Generate latest.json and package artifacts
        shell: bash
        run: |
          version="${{ github.ref_name }}"
          version="${version#v}"
          pub_date="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          mkdir -p output
          case "${{ matrix.os }}" in
          linux)
            sig="src-tauri/target/release/bundle/deb/${{ env.PROJECT_NAME }}_${version}_amd64.deb.sig"
            app="src-tauri/target/release/bundle/deb/${{ env.PROJECT_NAME }}_${version}_amd64.deb"
            cp "$app" output/
            cp "$sig" output/
            ;;
          macos)
            app="src-tauri/target/x86_64-apple-darwin/release/bundle/macos/${{ env.PROJECT_NAME }}.app.tar.gz"
            sig="src-tauri/target/x86_64-apple-darwin/release/bundle/macos/${{ env.PROJECT_NAME }}.app.tar.gz.sig"
            tarball="output/${{ env.PROJECT_NAME }}_${version}.app.tar.gz"
            tar -czf "$tarball" -C "$(dirname "$app")" "$(basename "$app")"
            ;;
          windows)
            sig="src-tauri/target/release/bundle/msi/${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi.sig"
            app="src-tauri/target/release/bundle/msi/${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi"
            cp "$app" output/
            cp "$sig" output/
            ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ matrix.os }}
          path: output
          retention-days: 1

  release:
    name: Release to studiffy-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bundle-windows
          path: ./artifacts/windows

      - name: Fetch GitHub release description
        id: fetch_release
        run: |
          RELEASE_DESCRIPTION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
            | jq -r '.body')
          echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate latest.json
        run: |
          version="${{ github.ref_name }}"
          version="${version#v}"
          pub_date="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          cat <<EOF > latest.json
          {
            "version": "$version",
            "notes": "${{ env.RELEASE_DESCRIPTION }}",
            "pub_date": "$pub_date",
            "platforms": {
              "windows-x86_64": {
                "signature": "$(cat artifacts/windows/${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi.sig | sed 's/"/\\"/g' | tr -d '\n')",
                "url": "https://raw.githubusercontent.com/med-aziz-guennichi/studiffy-release/main/releases/v${version}/msi/${{ env.PROJECT_NAME }}_${version}_x64_en-US.msi"
              }
            }
          }
          EOF

      - name: Clone and prepare release repo
        run: |
          git clone https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/med-aziz-guennichi/studiffy-release.git release-repo
          cd release-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git reset --hard
          git clean -fd
          git pull origin main

      - name: Copy release files
        run: |
          mkdir -p release-repo/releases/${{ github.ref_name }}/deb
          mkdir -p release-repo/releases/${{ github.ref_name }}/macos
          mkdir -p release-repo/releases/${{ github.ref_name }}/msi

          cp artifacts/linux/* release-repo/releases/${{ github.ref_name }}/deb/ || echo "No Linux files to copy"
          cp artifacts/macos/* release-repo/releases/${{ github.ref_name }}/macos/ || echo "No macOS files to copy"
          cp artifacts/windows/* release-repo/releases/${{ github.ref_name }}/msi/ || echo "No Windows files to copy"

          cp latest.json release-repo/latest.json

      - name: Commit and push changes
        run: |
          cd release-repo
          git add .
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "Release ${{ github.ref_name }} (all platforms)"
            git push origin main
          fi
